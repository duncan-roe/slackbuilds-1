--- opt/SageMath/local/lib/python3.9/site-packages/sage/combinat/posets/poset_examples.py.bu	2021-08-22 19:12:42.000000000 +1000
+++ opt/SageMath/local/lib/python3.9/site-packages/sage/combinat/posets/poset_examples.py	2022-01-02 13:10:42.447658457 +1100
@@ -155,7 +155,7 @@
 
     @staticmethod
     def BooleanLattice(n, facade=None, use_subsets=False):
-        """
+        r"""
         Return the Boolean lattice containing `2^n` elements.
 
         - ``n`` -- integer; number of elements will be `2^n`
--- opt/SageMath/local/lib/python3.9/site-packages/traitlets/config/loader.py.bu	2021-08-22 22:00:01.000000000 +1000
+++ opt/SageMath/local/lib/python3.9/site-packages/traitlets/config/loader.py	2022-01-11 11:39:00.600018177 +1100
@@ -792,7 +792,7 @@
                 nargs = '?'
             else:
                 nargs = None
-            if len(key) is 1:
+            if len(key) == 1:
                 paa('-'+key, '--'+key, type=text_type, dest=value, nargs=nargs)
             else:
                 paa('--'+key, type=text_type, dest=value, nargs=nargs)
@@ -801,7 +801,7 @@
                 #
                 self.alias_flags[self.aliases[key]] = value
                 continue
-            if len(key) is 1:
+            if len(key) == 1:
                 paa('-'+key, '--'+key, action='append_const', dest='_flags', const=value)
             else:
                 paa('--'+key, action='append_const', dest='_flags', const=value)
--- opt/SageMath/local/lib/python3.9/site-packages/psutil/_pslinux.py.bu	2021-08-22 21:58:18.000000000 +1000
+++ opt/SageMath/local/lib/python3.9/site-packages/psutil/_pslinux.py	2022-01-11 12:14:46.007349527 +1100
@@ -548,7 +548,7 @@
         # https://github.com/giampaolo/psutil/issues/200
         # try to parse /proc/stat as a last resort
         if num == 0:
-            search = re.compile('cpu\d')
+            search = re.compile(r'cpu\d')
             with open_text('%s/stat' % get_procfs_path()) as f:
                 for line in f:
                     line = line.split(' ')[0]
@@ -1465,9 +1465,9 @@
         @wrap_exceptions
         def memory_full_info(
                 self,
-                _private_re=re.compile(b"Private.*:\s+(\d+)"),
-                _pss_re=re.compile(b"Pss.*:\s+(\d+)"),
-                _swap_re=re.compile(b"Swap.*:\s+(\d+)")):
+                _private_re=re.compile(br"Private.*:\s+(\d+)"),
+                _pss_re=re.compile(br"Pss.*:\s+(\d+)"),
+                _swap_re=re.compile(br"Swap.*:\s+(\d+)")):
             basic_mem = self.memory_info()
             # Note: using 3 regexes is faster than reading the file
             # line by line.
@@ -1580,7 +1580,7 @@
             raise
 
     @wrap_exceptions
-    def num_ctx_switches(self, _ctxsw_re=re.compile(b'ctxt_switches:\t(\d+)')):
+    def num_ctx_switches(self, _ctxsw_re=re.compile(br'ctxt_switches:\t(\d+)')):
         data = self._read_status_file()
         ctxsw = _ctxsw_re.findall(data)
         if not ctxsw:
@@ -1593,7 +1593,7 @@
             return _common.pctxsw(int(ctxsw[0]), int(ctxsw[1]))
 
     @wrap_exceptions
-    def num_threads(self, _num_threads_re=re.compile(b'Threads:\t(\d+)')):
+    def num_threads(self, _num_threads_re=re.compile(br'Threads:\t(\d+)')):
         # Note: on Python 3 using a re is faster than iterating over file
         # line by line. On Python 2 is the exact opposite, and iterating
         # over a file on Python 3 is slower than on Python 2.
@@ -1649,7 +1649,7 @@
         return cext.proc_cpu_affinity_get(self.pid)
 
     def _get_eligible_cpus(
-            self, _re=re.compile(b"Cpus_allowed_list:\t(\d+)-(\d+)")):
+            self, _re=re.compile(br"Cpus_allowed_list:\t(\d+)-(\d+)")):
         # See: https://github.com/giampaolo/psutil/issues/956
         data = self._read_status_file()
         match = _re.findall(data)
@@ -1811,13 +1811,13 @@
         return int(self._parse_stat_file()[2])
 
     @wrap_exceptions
-    def uids(self, _uids_re=re.compile(b'Uid:\t(\d+)\t(\d+)\t(\d+)')):
+    def uids(self, _uids_re=re.compile(br'Uid:\t(\d+)\t(\d+)\t(\d+)')):
         data = self._read_status_file()
         real, effective, saved = _uids_re.findall(data)[0]
         return _common.puids(int(real), int(effective), int(saved))
 
     @wrap_exceptions
-    def gids(self, _gids_re=re.compile(b'Gid:\t(\d+)\t(\d+)\t(\d+)')):
+    def gids(self, _gids_re=re.compile(br'Gid:\t(\d+)\t(\d+)\t(\d+)')):
         data = self._read_status_file()
         real, effective, saved = _gids_re.findall(data)[0]
         return _common.pgids(int(real), int(effective), int(saved))
